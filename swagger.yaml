swagger: "2.0"
info:
  description: "This is my hospital server."
  version: "1.0.0"
  title: "Swagger Hosptial"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "hospital.swagger.io"
basePath: "/v2"
tags:
- name: "patient"
  description: "Everything about your Patients"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "medicine"
  description: "Access to medicines"
- name: "doctor"
  description: "Operations about doctors"
  externalDocs:
    description: "Find out more about my hospital"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /patient:
    post:
      tags:
      - "patient"
      summary: "Add a new patient to the hospital"
      description: ""
      operationId: "addPatient"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Patient object that needs to be added to the hospital"
        required: true
        schema:
          $ref: "#/definitions/Patient"
      responses:
        405:
          description: "Invalid input"
      security:
      - hospital_auth:
        - "write:patients"
        - "read:patients"
    put:
      tags:
      - "patient"
      summary: "Update an existing patient"
      description: ""
      operationId: "updatePatient"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Patient object that needs to be added to the hospital"
        required: true
        schema:
          $ref: "#/definitions/Patient"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Patient not found"
        405:
          description: "Validation exception"
      security:
      - hospital_auth:
        - "write:patients"
        - "read:patients"
  /patient/findByStatus:
    get:
      tags:
      - "patient"
      summary: "Finds Patient by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPatientsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "sick"
          - "recovering"
          - "dead"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Patient"
        400:
          description: "Invalid status value"
      security:
      - hospital_auth:
        - "write:patients"
        - "read:patients" 
  /patient/{patientId}:
    get:
      tags:
      - "patient"
      summary: "Find patient by ID"
      description: "Returns a single patient"
      operationId: "getPatientById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Patient"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Patient not found"
      security:
      - api_key: []
    post:
      tags:
      - "patient"
      summary: "Updates a patient in the hospital with form data"
      description: ""
      operationId: "updatePatientWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "patientId"
        in: "path"
        description: "ID of patient that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the patient"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the patient"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - hospital_auth:
        - "write:patients"
        - "read:patients"
    delete:
      tags:
      - "patient"
      summary: "Deletes a patient"
      description: ""
      operationId: "deletePatient"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "patientId"
        in: "path"
        description: "Patient id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Patient not found"
      security:
      - hospital_auth:
        - "write:patients"
        - "read:patients"  
  /medicine/inventory:
    get:
      tags:
      - "medicine"
      summary: "Returns medicine inventories"
      description: "Returns medicines to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /medicine/order:
    post:
      tags:
      - "medicine"
      summary: "Place an order for medicine"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the medicine"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /medicine/order/{orderId}:
    get:
      tags:
      - "medicine"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of mdeicine that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "medicine"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /doctor:
    post:
      tags:
      - "doctor"
      summary: "Create doctor"
      description: "This can only be done by the logged in doctor."
      operationId: "createDoctor"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created doctor object"
        required: true
        schema:
          $ref: "#/definitions/Doctor"
      responses:
        default:
          description: "successful operation"
  /doctor/createWithArray:
    post:
      tags:
      - "doctor"
      summary: "Creates list of doctors with given input array"
      description: ""
      operationId: "createDoctorsWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of doctor object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Doctor"
      responses:
        default:
          description: "successful operation"
  /doctor/createWithList:
    post:
      tags:
      - "doctor"
      summary: "Creates list of doctors with given input array"
      description: ""
      operationId: "createDoctorsWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of doctor object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Doctor"
      responses:
        default:
          description: "successful operation"
  /doctor/login:
    get:
      tags:
      - "doctor"
      summary: "Logs doctor into the system"
      description: ""
      operationId: "loginDoctor"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The doctor name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the doctor"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /doctor/logout:
    get:
      tags:
      - "doctor"
      summary: "Logs out current logged in doctor session"
      description: ""
      operationId: "logoutDoctor"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /doctor/{username}:
    get:
      tags:
      - "doctor"
      summary: "Get doctor by doctor name"
      description: ""
      operationId: "getDoctorByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Doctor"
        400:
          description: "Invalid username supplied"
        404:
          description: "Doctor not found"
    put:
      tags:
      - "doctor"
      summary: "Updated doctor"
      description: "This can only be done by the logged in doctor."
      operationId: "updateDoctor"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated doctor object"
        required: true
        schema:
          $ref: "#/definitions/Doctor"
      responses:
        400:
          description: "Invalid doctor supplied"
        404:
          description: "Doctor not found"
    delete:
      tags:
      - "doctor"
      summary: "Delete doctor"
      description: "This can only be done by the logged in doctor."
      operationId: "deleteDoctor"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "Doctor not found"
securityDefinitions:
  hospital_auth:
    type: "oauth2"
    authorizationUrl: "http://hospital.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:patients: "modify patients in your account"
      read:patients: "read your patients"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      patientId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Doctor:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "Doctor Status"
    xml:
      name: "Doctor"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Patient:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "patient status in the hospital"
        enum:
        - "sick"
        - "recovering"
        - "dead"
    xml:
      name: "Patient"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"